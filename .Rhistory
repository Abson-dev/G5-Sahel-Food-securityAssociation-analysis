library(doParallel)
library(progressr)
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
# transactions in sparse format with
# 123382 transactions (rows) and
# 318 items (columns)
#colnames(trans)
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
mine_rules <- function(trans_data, support, confidence) {
library("arules")
rules <- apriori(trans_data, parameter = list(support = support, confidence = confidence, target = "rules",maxtime = 10,minlen = 2))
return(rules)
}
num_cores <- 4
cl <- makeCluster(num_cores)
# Export the necessary objects to the cluster
clusterExport(cl, list("trans", "mine_rules", "support", "confidence","num_cores"))
# Apply the function in parallel
time_par <- system.time(
results <- parLapply(cl, 1, function(i) mine_rules(trans, support, confidence))
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(parallel)
library(foreach)
library(doParallel)
library(progressr)
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
# transactions in sparse format with
# 123382 transactions (rows) and
# 318 items (columns)
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#  subset transactions
trans_subset <- trans[1:10]
weclat_results <- arules::weclat(trans_subset, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans_subset, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(parallel)
library(foreach)
library(doParallel)
library(progressr)
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weights <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
# Function to calculate weighted support for a given itemset
calculate_weighted_support <- function(itemset, trans, weights) {
itemset <- unlist(itemset)
subset_trans <- trans[which(rowSums(as.matrix(trans[, itemset, drop = FALSE])) > 0), ]
weight_indices <- which(rowSums(as.matrix(trans[, itemset, drop = FALSE])) > 0)
sum(weights[weight_indices])
}
# Parallelized WECLAT function with memory optimization
weighted_eclat <- function(trans, weights, support, minlen, maxlen, verbose = FALSE) {
if (support <= 0 || support > 1) {
stop("Support should be between 0 and 1.")
}
# Set up parallel computing
num_cores <- detectCores() - 1  # Use all but one core
cl <- makeCluster(num_cores)
clusterExport(cl, list("trans", "weights", "calculate_weighted_support"))
# Try to apply ECLAT in a memory-efficient way
tryCatch({
eclat_results <- eclat(trans, parameter = list(support = support, minlen = minlen, maxlen = maxlen))
itemsets <- as(eclat_results, "data.frame")
# Calculate weighted support in parallel
itemsets$weighted_support <- unlist(parLapply(cl, itemsets$items, function(itemset) {
calculate_weighted_support(itemset, trans, weights)
}))
# Normalize by total weight
total_weight <- sum(weights)
itemsets$weighted_support <- itemsets$weighted_support / total_weight
# Sort by weighted support
itemsets <- itemsets[order(itemsets$weighted_support, decreasing = TRUE), ]
if (verbose) {
print(itemsets)
}
return(itemsets)
}, error = function(e) {
stop("Error in eclat: ", e$message)
}, finally = {
# Stop the cluster
stopCluster(cl)
})
}
# Define parameters
support <- 0.001  # Must be between 0 and 1
minlen <- 2
maxlen <- 5
verbose <- TRUE
set.seed(1994)
sample_size <- ceiling(length(trans) * 0.5)  # Adjust percentage as needed
sample_size <- ceiling(length(trans) * 0.01)  # Adjust percentage as needed
sample_indices <- sample(length(trans), sample_size)
trans_sampled <- trans[sample_indices]
weights_sampled <- weights[sample_indices]
# Apply WECLAT
frequent_itemsets <- weighted_eclat(trans_sampled, weights_sampled, support, minlen, maxlen, verbose)
ength(trans)
length(trans)
sample_size <- ceiling(length(trans) * 0.001)  # Adjust percentage as needed
sample_indices <- sample(length(trans), sample_size)
trans_sampled <- trans[sample_indices]
weights_sampled <- weights[sample_indices]
# Apply WECLAT
frequent_itemsets <- weighted_eclat(trans_sampled, weights_sampled, support, minlen, maxlen, verbose)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(parallel)
library(foreach)
library(doParallel)
library(progressr)
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
# transactions in sparse format with
# 123382 transactions (rows) and
# 318 items (columns)
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#############################
#We use the APRIORI algorithm
support = 0.5
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
#############################
#We use the APRIORI algorithm
support = 0.65
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## Example 2: Find association rules in weighted data
trans <-  list(
c("A", "B", "C", "D", "E"),
c("C", "F", "G"),
c("A", "B"),
c("A"),
c("C", "F", "G", "H"),
c("A", "G", "H")
)
weight <- c(5, 10, 6, 7, 5, 1)
## convert list to transactions
trans <-  transactions(trans)
## add weight information
transactionInfo(trans) <- data.frame(weight = weight)
inspect(trans)
## mine weighed support itemsets
s <- weclat(trans, parameter = list(support = 0.3),
control = list(verbose = TRUE))
inspect(sort(s))
## create association rules
r <- ruleInduction(s, confidence = .5)
inspect(r)
arulesViz::ruleExplorer(r)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
# transactions in sparse format with
# 123382 transactions (rows) and
# 318 items (columns)
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
weclat_results <- arules::weclat(trans, parameter = list(support = 0.3, minlen = 2), control = list(verbose = TRUE))
#  subset transactions
trans_subset <- trans[1]
weclat_results <- arules::weclat(trans_subset, parameter = list(support = 0.3, minlen = 2), control = list(verbose = TRUE))
class(trans)
trans
trans_subset
## Example 2: Find association rules in weighted data
trans <-  list(
c("A", "B", "C", "D", "E"),
c("C", "F", "G"),
c("A", "B"),
c("A"),
c("C", "F", "G", "H"),
c("A", "G", "H")
)
weight <- c(5, 10, 6, 7, 5, 1)
## convert list to transactions
trans <-  transactions(trans)
## add weight information
transactionInfo(trans) <- data.frame(weight = weight)
trans
weclat_results <- arules::weclat(trans, parameter = list(support = 0.3, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = 0.67,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
set.seed(1234)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 5
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
## calulate regular item frequencies
itemFrequency(trans, weighted = FALSE)
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans_subset, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = confidence,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 50
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
set.seed(1234)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 10
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = confidence,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 15
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = confidence,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 20
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#############################
#We use the APRIORI algorithm
support = 0.001
confidence = 0.65
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = confidence,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
# Sample 5 columns randomly from the data frame
num_cols_to_sample <- 25
sampled_columns <- sample(names(working_data), num_cols_to_sample)
# Extract the sampled columns
sampled_data <- working_data[, sampled_columns]
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(sampled_data)
trans
#colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
weclat_results <- arules::weclat(trans, parameter = list(support = support, minlen = 2), control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(weclat_results, method = c("apriori"), confidence = confidence,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
