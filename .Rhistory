dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
tmp_data2 = tmp_data %>% janitor::remove_constant()
#178 variables
setdiff(names(tmp_data2),names(tmp_data))
difference(names(tmp_data2),names(tmp_data))
setdiff(names(tmp_data2),names(tmp_data))
names(tmp_data2)
names(tmp_data)
setdiff(names(tmp_data),names(tmp_data2))
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(haven)
G5_Sahel_2018_2023_Mali_enhanced <- read_dta("C:/Users/AHema/OneDrive - CGIAR/Desktop/2024/WFP/G5 - Sahel countries/Integrated & enhanced dataset Mali/Integrated & enhanced dataset Mali/G5_Sahel_2018_2023_Mali_enhanced.dta")
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_enhanced)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_enhanced)))
tmp_data = G5_Sahel_2018_2023_Mali_enhanced
#converted into a set of transactions where each row (ID) represents a transaction
tmp_data <- tmp_data %>% tibble::column_to_rownames(var="ID")
#"admin0Pcod"  "admin0name"  "admin1Pcod"  "admin1name"  "admin2PcodN" "admin2name"
# tmp_data = tmp_data %>%
#   dplyr::select(-c(gtsummary::starts_with("admin")))
tmp_data = tmp_data %>%
dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
tmp_data_df = tmp_data
table(tmp_data_df$heavy_freq_nov)
table(tmp_data_df$heavy_spell_nov)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(haven)
G5_Sahel_2018_2023_Mali_enhanced <- read_dta("C:/Users/AHema/OneDrive - CGIAR/Desktop/2024/WFP/G5 - Sahel countries/Integrated & enhanced dataset Mali/Integrated & enhanced dataset Mali/G5_Sahel_2018_2023_Mali_enhanced.dta")
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_enhanced)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_enhanced)))
tmp_data = G5_Sahel_2018_2023_Mali_enhanced
#converted into a set of transactions where each row (ID) represents a transaction
tmp_data <- tmp_data %>% tibble::column_to_rownames(var="ID")
#"admin0Pcod"  "admin0name"  "admin1Pcod"  "admin1name"  "admin2PcodN" "admin2name"
# tmp_data = tmp_data %>%
#   dplyr::select(-c(gtsummary::starts_with("admin")))
tmp_data = tmp_data %>%
dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
tmp_data_df = tmp_data
#Less than 2 uniques breaks left. Maybe the variable has only one value!
working_data = tmp_data_df %>% dplyr::select(-c("heavy_freq_nov","heavy_spell_nov","dry_freq_dec","dry_spell_dec","heavy_freq_dec","heavy_spell_dec","dry_freq_jan","dry_spell_jan","heavy_freq_jan","heavy_spell_jan","heavy_freq_feb","heavy_spell_feb","heavy_freq_mar","heavy_spell_mar","heavy_freq_apr","heavy_spell_apr","cold_freq_oct","cold_spell_oct","hot_freq_nov","hot_spell_nov","hot_freq_dec","hot_spell_dec","hot_freq_jan","hot_spell_jan","cold_freq_may","cold_spell_may","cold_freq_jun","cold_spell_jun","cold_freq_jul","cold_spell_jul","cold_freq_aug","cold_spell_aug","cold_freq_sep","cold_spell_sep"))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
head(trans)
trans
colnames(trans)
#colnames(trans)
itemFrequencyPlot(trans,topN = 20)
itemFrequencyPlot(trans,topN = 10)
ggplot(
tibble(
Support = sort(itemFrequency(trans, type = "absolute"), decreasing = TRUE),
Item = seq_len(ncol(trans))
), aes(x = Item, y = Support)) + geom_line()
2^ncol(trans)
minsup = 0.05
minconf = 0.9
rules <- apriori(trans, parameter = list(target = "frequent",support = minsup, confidence = minconf))
shiny::runApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(haven)
G5_Sahel_2018_2023_Mali_enhanced <- read_dta("C:/Users/AHema/OneDrive - CGIAR/Desktop/2024/WFP/G5 - Sahel countries/Integrated & enhanced dataset Mali/Integrated & enhanced dataset Mali/G5_Sahel_2018_2023_Mali_enhanced.dta")
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_enhanced)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_enhanced)))
tmp_data = G5_Sahel_2018_2023_Mali_enhanced
#converted into a set of transactions where each row (ID) represents a transaction
tmp_data <- tmp_data %>% tibble::column_to_rownames(var="ID")
#"admin0Pcod"  "admin0name"  "admin1Pcod"  "admin1name"  "admin2PcodN" "admin2name"
# tmp_data = tmp_data %>%
#   dplyr::select(-c(gtsummary::starts_with("admin")))
tmp_data = tmp_data %>%
dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
tmp_data_df = tmp_data
#Less than 2 uniques breaks left. Maybe the variable has only one value!
working_data = tmp_data_df %>% dplyr::select(-c("heavy_freq_nov","heavy_spell_nov","dry_freq_dec","dry_spell_dec","heavy_freq_dec","heavy_spell_dec","dry_freq_jan","dry_spell_jan","heavy_freq_jan","heavy_spell_jan","heavy_freq_feb","heavy_spell_feb","heavy_freq_mar","heavy_spell_mar","heavy_freq_apr","heavy_spell_apr","cold_freq_oct","cold_spell_oct","hot_freq_nov","hot_spell_nov","hot_freq_dec","hot_spell_dec","hot_freq_jan","hot_spell_jan","cold_freq_may","cold_spell_may","cold_freq_jun","cold_spell_jun","cold_freq_jul","cold_spell_jul","cold_freq_aug","cold_spell_aug","cold_freq_sep","cold_spell_sep"))
#144 variables
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
#view the format
trans
# from 144 variables to 427 items (columns)
# discrete features/variables need be directly translated into items and continuous features need to be discretized
#colnames(trans)
itemFrequencyPlot(trans,topN = 10)
dev.off()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(haven)
G5_Sahel_2018_2023_Mali_enhanced <- read_dta("C:/Users/AHema/OneDrive - CGIAR/Desktop/2024/WFP/G5 - Sahel countries/Integrated & enhanced dataset Mali/Integrated & enhanced dataset Mali/G5_Sahel_2018_2023_Mali_enhanced.dta")
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_enhanced)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_enhanced)))
tmp_data = G5_Sahel_2018_2023_Mali_enhanced
#converted into a set of transactions where each row (ID) represents a transaction
tmp_data <- tmp_data %>% tibble::column_to_rownames(var="ID")
#"admin0Pcod"  "admin0name"  "admin1Pcod"  "admin1name"  "admin2PcodN" "admin2name"
# tmp_data = tmp_data %>%
#   dplyr::select(-c(gtsummary::starts_with("admin")))
tmp_data = tmp_data %>%
dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
tmp_data_df = tmp_data
#Less than 2 uniques breaks left. Maybe the variable has only one value!
working_data = tmp_data_df %>% dplyr::select(-c("heavy_freq_nov","heavy_spell_nov","dry_freq_dec","dry_spell_dec","heavy_freq_dec","heavy_spell_dec","dry_freq_jan","dry_spell_jan","heavy_freq_jan","heavy_spell_jan","heavy_freq_feb","heavy_spell_feb","heavy_freq_mar","heavy_spell_mar","heavy_freq_apr","heavy_spell_apr","cold_freq_oct","cold_spell_oct","hot_freq_nov","hot_spell_nov","hot_freq_dec","hot_spell_dec","hot_freq_jan","hot_spell_jan","cold_freq_may","cold_spell_may","cold_freq_jun","cold_spell_jun","cold_freq_jul","cold_spell_jul","cold_freq_aug","cold_spell_aug","cold_freq_sep","cold_spell_sep"))
#144 variables
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
#view the format
trans
itemFrequencyPlot(trans,topN = 10)
ggplot(
tibble(
Support = sort(itemFrequency(trans, type = "absolute"), decreasing = TRUE),
Item = seq_len(ncol(trans))
), aes(x = Item, y = Support)) + geom_line()
minsup = 0.05
minconf = 0.9
rules <- apriori(trans, parameter = list(target = "frequent",support = minsup, confidence = minconf))
length(rules)
rules |> head() |> inspect()
write(rules, file = "rules.csv", quote = TRUE)
inspectDT(rules,options = list(scrollX = TRUE))
shiny::runApp()
ruleExplorer(rules)
minsup = 0.05
minconf = 0.9
rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
shiny::runApp()
runApp()
runApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
library(haven)
G5_Sahel_2018_2023_Mali_enhanced <- read_dta("C:/Users/AHema/OneDrive - CGIAR/Desktop/2024/WFP/G5 - Sahel countries/Integrated & enhanced dataset Mali/Integrated & enhanced dataset Mali/G5_Sahel_2018_2023_Mali_enhanced.dta")
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_enhanced)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_enhanced = G5_Sahel_2018_2023_Mali_enhanced %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_enhanced)))
tmp_data = G5_Sahel_2018_2023_Mali_enhanced
#converted into a set of transactions where each row (ID) represents a transaction
tmp_data <- tmp_data %>% tibble::column_to_rownames(var="ID")
#"admin0Pcod"  "admin0name"  "admin1Pcod"  "admin1name"  "admin2PcodN" "admin2name"
# tmp_data = tmp_data %>%
#   dplyr::select(-c(gtsummary::starts_with("admin")))
tmp_data = tmp_data %>%
dplyr::select(-c("admin0Pcod","admin0name","admin1Pcod","admin2PcodN"))
#"hhid","year","wave","weight"
tmp_data = tmp_data %>%
dplyr::select(-c("hhid","weight"))
#184 variables
table(tmp_data$zs_potato_inte)
tmp_data = tmp_data %>% janitor::remove_constant()
#178 variables
# "zs_potato_inte","zs_orange_inte","zs_potato_freq","zs_orange_freq","zs_potato_spell","zs_orange_spell"
tmp_data_df = tmp_data
table(tmp_data_df$heavy_freq_nov)
table(tmp_data_df$heavy_spell_feb)
#Less than 2 uniques breaks left. Maybe the variable has only one value!
working_data = tmp_data_df %>% dplyr::select(-c("heavy_freq_nov","heavy_spell_nov","dry_freq_dec","dry_spell_dec","heavy_freq_dec","heavy_spell_dec","dry_freq_jan","dry_spell_jan","heavy_freq_jan","heavy_spell_jan","heavy_freq_feb","heavy_spell_feb","heavy_freq_mar","heavy_spell_mar","heavy_freq_apr","heavy_spell_apr","cold_freq_oct","cold_spell_oct","hot_freq_nov","hot_spell_nov","hot_freq_dec","hot_spell_dec","hot_freq_jan","hot_spell_jan","cold_freq_may","cold_spell_may","cold_freq_jun","cold_spell_jun","cold_freq_jul","cold_spell_jul","cold_freq_aug","cold_spell_aug","cold_freq_sep","cold_spell_sep"))
#144 variables
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
#view the format
trans
colnames(trans)
itemFrequencyPlot(trans,topN = 10)
runApp()
shiny::runApp()
runApp()
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
working_data = working_data %>%
dplyr::select(c("ID",gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
View(working_data)
View(working_data)
working_data = working_data %>% janitor::remove_constant()
mydata <- working_data %>%
mutate_at(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")), funs(recode(., `1`=TRUE, `0`=FALSE, .default = NA)))
vars = working_data %>% names()
mydata <- working_data %>%
mutate_at(vars, funs(recode(., `1`=TRUE, `0`=FALSE, .default = NA)))
View(mydata)
working_data <- working_data %>%
mutate_at(vars, funs(recode(., `1`=TRUE, `0`=FALSE, .default = NA)))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
colnames(trans)
## add weight information
transactionInfo(trans) <- data.frame(weight = weight)
#We use the APRIORI algorithm
minsup = 0.65
minconf = 0.9
# rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
## mine weighed support itemsets
s <- weclat(trans, parameter = list(support = minsup),
control = list(verbose = TRUE))
## create association rules
rules <- ruleInduction(s,method = c("apriori"), confidence = minconf,transactions = trans, verbose = TRUE)
arulesViz::ruleExplorer(rules)
View(working_data)
colnames(trans)
working_data %>% names()
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
working_data = working_data %>% janitor::remove_constant()
vars = working_data %>% names()
working_data <- working_data %>%
dplyr::mutate_at(vars, funs(recode(., `1`=TRUE, `0`=FALSE, .default = .)))
working_data <- working_data %>%
dplyr::mutate_at(vars, funs(recode(., `1`=TRUE, `0`=FALSE, .default = NA)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
working_data = working_data %>% janitor::remove_constant()
vars = working_data %>% names()
working_data <- working_data %>%
dplyr::mutate_at(vars, ~recode(., `1`=TRUE, `0`=FALSE, .default = NA))
View(working_data)
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
colnames(trans)
## add weight information
transactionInfo(trans) <- data.frame(weight = weight)
#We use the APRIORI algorithm
minsup = 0.05
minconf = 0.9
# rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
## mine weighed support itemsets
s <- weclat(trans, parameter = list(support = minsup),
control = list(verbose = TRUE))
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
working_data = working_data %>% janitor::remove_constant()
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- transactions(working_data)
table(working_data$D1_deadliness)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~recode(., `1`="TRUE", `0`="FALSE", .default = NA))
vars = working_data %>% names()
working_data <- working_data %>%
dplyr::mutate_at(vars, ~recode(., `1`="TRUE", `0`="FALSE", .default = NA))
working_data <- working_data %>%
dplyr::mutate_at(vars, ~recode(., 1=TRUE, 0=FALSE, .default = NA))
working_data <- working_data %>%
dplyr::mutate_at(vars, ~recode(., `1`=TRUE, `0`=FALSE, .default = NA))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
colnames(trans)
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
View(working_data)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled(., `1`=TRUE, `0`=FALSE, .default = NA))
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., `1`=TRUE, `0`=FALSE, .default = NA))
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`TRUE` = 1,
`FALSE` = 0
)))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
working_data <- working_data %>% labelled::to_factor()
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#We use the APRIORI algorithm
minsup = 0.5
minconf = 0.9
# rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
## mine weighed support itemsets
s <- weclat(trans, parameter = list(support = minsup),
control = list(verbose = TRUE))
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
## Import data and some data wrangling
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#View(G5_Sahel_2018_2023_Mali_data)
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
#171 variables
working_data = working_data %>% janitor::remove_constant()
#165 variables
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`TRUE` = 1,
`FALSE` = 0
)))
working_data <- working_data %>% labelled::to_factor()
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#We use the APRIORI algorithm
minsup = 0.5
minconf = 0.9
# rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
## Weighted Eclat (WEclat)
s <- weclat(trans, parameter = list(support = minsup),
control = list(verbose = TRUE))
library(tidyverse) # for data manipulation
library(arules) # for association analysis
library(arulesViz) # for rules vizualisation
G5_Sahel_2018_2023_Mali_data <- haven::read_dta("data/G5_Sahel_2018_2023_Mali_enhanced_DICHOTOMIZED.dta")
#View(G5_Sahel_2018_2023_Mali_data)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
labelled::to_factor()
#Create ID by using admin2PcodN, wave and generate values between 1 to number rows (123,382)
G5_Sahel_2018_2023_Mali_data = G5_Sahel_2018_2023_Mali_data %>%
mutate(ID = paste0(admin2PcodN,"_",wave,"_",1:nrow(G5_Sahel_2018_2023_Mali_data)))
working_data = G5_Sahel_2018_2023_Mali_data
#converted into a set of transactions where each row (ID) represents a transaction
working_data <- working_data %>% tibble::column_to_rownames(var="ID")
weight <-working_data$weight
working_data = working_data %>%
dplyr::select(c(gtsummary::starts_with("D1_"),gtsummary::starts_with("D_")))
working_data = working_data %>% janitor::remove_constant()
vars = working_data %>% names()
working_data <- working_data %>%
mutate_at(vars, as.numeric)
working_data <- working_data %>%
dplyr::mutate_at(vars, ~labelled::labelled(., labels = c(
`Yes` = 1,
`No` = 0
)))
working_data <- working_data %>% labelled::to_factor()
# "D1_zs_onion_inte","D1_zs_milkpowder_inte"
# "D1_zs_milkpowder_freq","D1_zs_sugar_freq"
# "D1_zs_sugar_spell","D1_R_drought"
working_data = working_data %>%
dplyr::select(-c(12, 14, 27, 29, 42, 44))
# converted into a set of transactions where each row represents a transaction and each column is translated into items
trans <- arules::transactions(working_data)
trans
# transactions in sparse format with
# 123382 transactions (rows) and
# 318 items (columns)
colnames(trans)
## add weight information
arules::transactionInfo(trans) <- data.frame(weight = weight)
#We use the APRIORI algorithm
minsup = 0.5
minconf = 0.9
# rules <- apriori(trans, parameter = list(support = minsup, confidence = minconf))
## Weighted Eclat (WEclat)
s <- arules::weclat(trans, parameter = list(support = minsup),
control = list(verbose = TRUE))
